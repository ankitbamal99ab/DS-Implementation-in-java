class Main
{
    // Unbounded Knapsack
    public static int uknapsackdp(int arr[],int V[],int W,int n)      // Dp Approach
    {
        int dp[][]=new int[n+1][W+1];
        for(int i=0;i<=n;i++) dp[i][0]=0;
        for(int j=0;j<=W;j++) dp[0][j]=0;

        for(int i=1;i<=n;i++)
            for(int j=1;j<=W;j++)
            {

                if(arr[i-1]>j)
                    dp[i][j]=dp[i-1][j];
                else
                    dp[i][j]=Math.max(dp[i-1][j],V[i-1]+dp[i][j-arr[i-1]]);
            }
        return dp[n][W];
    }
    public static int uknapsack(int arr[],int V[],int W, int n)     // Recursive Code
    {
        if(W==0 || n==0)
            return 0;
        if(arr[n-1]>W)
            return uknapsack(arr,V,W,n-1);
        else
            return Math.max(uknapsack(arr,V,W,n-1),V[n-1]+uknapsack(arr,V,W-arr[n-1],n));
    }
    public static void main(String args[])
    {
        int arr[]={1,3,4,5,};
        int V[]={10,40,50,70};
        int W=8;
        System.out.println(uknapsack(arr,V,W,arr.length));
        System.out.println(uknapsackdp(arr,V,W,arr.length));
    }
}
