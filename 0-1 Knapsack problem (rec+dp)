class Main
{
    static int knapsackdp(int wt[],int V[],int n,int W)
    {
        int dp[][]=new int[n+1][W+1];
        for(int i=0;i<=n;i++) dp[i][0]=0;
        for(int i=0;i<=W;i++) dp[0][i]=0;

        for(int i=1;i<=n;i++)
            for(int j=1;j<=W;j++)
            {
                if(dp[i][j]==0)
                    dp[i][j]=0;
                if(wt[n-1]<=W)
                {
                    dp[i][j]=Math.max(V[n-1] + knapsack(wt,V,n-1,W-wt[n-1]),knapsack(wt,V,n-1,W));
                }else
                    dp[i][j]=knapsack(wt,V,n-1,W);
            }
        return dp[n][W];
    }
    static int knapsackmemo(int wt[],int V[],int n,int W)
    {
        int dp[][]=new int[n+1][W+1];
       for(int row[]:dp)
           Arrays.fill(row,-1);

        if(n==0|| W==0)
            return  dp[n][W]=0;

        if(dp[n][W]!=-1)
            return dp[n][W];
        if(wt[n-1]<=W)
        {
            return dp[n][W]=Math.max(V[n-1] + knapsack(wt,V,n-1,W-wt[n-1]),knapsack(wt,V,n-1,W));
        }

        else
            return dp[n][W]=knapsack(wt,V,n-1,W);
    }
    static int knapsack(int wt[],int V[],int n,int W)
    {
        if(n==0|| W==0)
            return 0;
        if(wt[n-1]<=W)
            return Math.max(V[n-1] + knapsack(wt,V,n-1,W-wt[n-1]),knapsack(wt,V,n-1,W));
        else
            return knapsack(wt,V,n-1,W);
    }
    public static void main(String args[])
    {
        int wt[]={1,2,3};
        int V[]={10,15,40};
        System.out.println(knapsack(wt,V,wt.length,1));
        System.out.println(knapsackmemo(wt,V,wt.length,6));
        System.out.println(knapsackdp(wt,V,wt.length,1));
    }
}
