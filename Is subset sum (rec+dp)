class Main
{
    static boolean subsetsumdp(int arr[],int n,int sum)             // DP solution
    {
        boolean dp[][]=new boolean[n+1][sum+1];
        for(int j=0;j<=sum;j++) dp[0][j]=false;
        for(int i=0;i<=n;i++) dp[i][0]=true;

        for(int i=1;i<=n;i++)
            for(int j=1;j<=sum;j++)
                if(arr[i-1]>j)
                     dp[i][j]=dp[i-1][j];
                else
                     dp[i][j]=dp[i-1][j]||dp[i-1][j-arr[i-1]];



        return dp[n][sum];
    }
    static boolean subsetsum(int arr[],int n,int sum)          // Recursion
    {
        if(sum==0) return true;
        if(n==0 && sum!=0)return false;

        if(arr[n-1]>sum)
            return subsetsum(arr,n-1,sum);
        else
            return subsetsum(arr,n-1,sum-arr[n-1])|| subsetsum(arr,n-1,sum);
    }
    public static void main(String args[])
    {
        int arr[]={3,4,5,2};
        System.out.println(subsetsum(arr,arr.length,6));
        System.out.println(subsetsumdp(arr,arr.length,26));

    }
}
