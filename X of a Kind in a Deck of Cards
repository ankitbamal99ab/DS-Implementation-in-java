class Solution {
    
    static int gcd(int a, int b) 
    { 
        if (a == 0) 
            return b; 
        return gcd(b % a, a); 
    } 
    
    public boolean hasGroupsSizeX(int[] deck) {
        
        
        /*
        Algorithm
        1-find frequency array
        2-find gcd of frequency value
        3- return true  if(gcd>=2) else return false;
        
        WHY:
        In this problem we want to make a pair (every pair of same size and value of Integer is also same                  in same pair )
        
        like first Example, 
        so gcd gives the greatest common divisor which tells us size of group
        */
        
        HashMap<Integer,Integer> hmp=new HashMap<>();
        for(int i=0;i<deck.length;i++)
        {
            if(hmp.containsKey(deck[i])==true)
                hmp.put(deck[i],hmp.get(deck[i])+1);
            else
                hmp.put(deck[i],1);
        }
        
        int result=0;
        for(int a:hmp.keySet())
        {
            result=gcd(result,hmp.get(a));
        }
        
        if(result>=2)
            return true;
        
        return false;
    }
}
