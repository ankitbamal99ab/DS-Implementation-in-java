/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
 1- 2 Pointer Technique
 -----------------------
 
public class Solution {
    public boolean hasCycle(ListNode head) {
        // Floyd's cycle finding algorithm
        
        ListNode slow=head;
        ListNode fast=head;
        while(slow!=null && fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
            
            if(slow==fast)
                return true;
        }
        return false;
    }
}



2- HashSet Technique
--------------------------
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null)
            return false;
        HashSet<ListNode> hmp=new HashSet<>();
        while(head!=null)
        {
            if(hmp.contains(head)==true)
                return true;
            
            hmp.add(head);
            head=head.next;
        }
        
        return false;
    }
}
